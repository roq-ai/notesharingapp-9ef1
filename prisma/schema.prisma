generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model note {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String     @db.VarChar(255)
  content    String
  user_id    String     @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  user       user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  note_tag   note_tag[] @ignore
  share      share[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model note_tag {
  note_id    String   @db.Uuid
  tag_id     String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  note       note     @relation(fields: [note_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag        tag      @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model share {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  note_id                      String   @db.Uuid
  receiver_id                  String   @db.Uuid
  sender_id                    String   @db.Uuid
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  note                         note     @relation(fields: [note_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_share_receiver_idTouser user     @relation("share_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_share_sender_idTouser   user     @relation("share_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tag {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String     @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  note_tag   note_tag[] @ignore
}

model user {
  id                            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                         String    @unique @db.VarChar(255)
  firstName                     String?   @db.VarChar(255)
  lastName                      String?   @db.VarChar(255)
  roq_user_id                   String    @db.VarChar(255)
  tenant_id                     String    @db.VarChar(255)
  created_at                    DateTime  @default(now()) @db.Timestamp(6)
  updated_at                    DateTime  @default(now()) @db.Timestamp(6)
  company                       company[]
  note                          note[]
  share_share_receiver_idTouser share[]   @relation("share_receiver_idTouser")
  share_share_sender_idTouser   share[]   @relation("share_sender_idTouser")
}
